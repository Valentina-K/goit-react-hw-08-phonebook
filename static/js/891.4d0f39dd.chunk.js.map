{"version":3,"file":"static/js/891.4d0f39dd.chunk.js","mappings":"2XAAaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,KAAjB,ECGpBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMI,SAASC,KAAnB,EACtBC,EAAkB,SAAAN,GAAK,OAAIA,EAAMI,SAASG,SAAnB,EACvBC,EAAc,SAAAR,GAAK,OAAIA,EAAMI,SAASK,KAAnB,EACnBC,GAAqBC,EAAAA,EAAAA,IAC9B,CAACR,EAAeJ,IAAc,SAACM,EAAOH,GACxC,MAAc,KAAVA,EAAqBG,EAClBA,EAAMJ,QAAO,SAAAW,GAAI,OACtBA,EAAKC,KAAKC,oBAAoBC,SAASb,EAAMY,oBADvB,GAGzB,I,mBCMKE,GAASC,EAAAA,EAAAA,IAAe,gBAAiB,GA4F/C,EA1FoB,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOL,EAAP,KAAaM,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXnB,GAAWoB,EAAAA,EAAAA,IAAYrB,GAEvBsB,EAAYT,IACZU,EAAaV,IAEbW,EAAe,SAAAC,GACnB,MAAwBA,EAAIC,OAApBhB,EAAR,EAAQA,KAAMX,EAAd,EAAcA,MACd,OAAQW,GACN,IAAK,OACHM,EAAQjB,GACR,MACF,IAAK,QACHmB,EAAUnB,GACV,MACF,QACE,OAEL,EAgBD,OACE,UAAC,KAAD,CAAa4B,GAAG,OAAOC,YAAU,EAACC,SAXf,SAAAJ,GACnBA,EAAIK,iBACC7B,EAAS8B,MAAK,SAAAC,GAAO,OAAIA,EAAQtB,OAASA,CAArB,IAGxBuB,EAAAA,GAAAA,MAAA,UAAevB,EAAf,4BAFAS,GAASe,EAAAA,EAAAA,IAAW,CAAExB,KAAAA,EAAMO,OAAAA,KAP9BD,EAAQ,IACRE,EAAU,GAWX,EAGC,WACE,UAAC,KAAD,CAAKiB,GAAI,EAAT,WACE,SAAC,IAAD,CAAWC,QAASd,EAAWe,UAAU,QAAzC,mBAGA,UAAC,IAAD,YACE,SAAC,IAAD,CACEC,cAAc,OACdC,UAAU,SAAC,MAAD,CAAQC,KAAK,YAAYC,KAAM,QAE3C,SAAC,EAAAC,EAAD,CACEC,KAAK,OACLC,YAAY,eACZlC,KAAK,OACLX,MAAOW,EACPmC,GAAIvB,EACJwB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUzB,WAIhB,UAAC,KAAD,CAAKW,GAAI,EAAT,WACE,SAAC,IAAD,CAAWC,QAASb,EAAYc,UAAU,QAA1C,qBAGA,UAAC,IAAD,YACE,SAAC,IAAD,CACEC,cAAc,OACdC,UAAU,SAAC,IAAD,CAAWW,MAAM,gBAE7B,SAAC,EAAAR,EAAD,CACEC,KAAK,MACLC,YAAY,eACZlC,KAAK,QACLX,MAAOkB,EACP6B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRH,GAAItB,EACJ0B,SAAUzB,WAIhB,SAAC,IAAD,CAAQmB,KAAK,SAASR,GAAI,EAA1B,2BAKL,E,2DCtGKgB,EAAU,SAAC,GAA0B,IAAxBzC,EAAuB,EAAvBA,KAAMO,EAAiB,EAAjBA,OAAQ4B,EAAS,EAATA,GACzB1B,GAAWC,EAAAA,EAAAA,MACjB,OACE,UAAC,KAAD,CAAUgC,SAAS,MAAnB,WACE,SAAC,KAAD,CACEd,cAAc,OACdC,UAAU,SAAC,MAAD,CAAcC,KAAK,QAAQC,KAAM,KAC3CY,GAAI,IAEL3C,EANH,KAMWO,GACT,SAAC,IAAD,CACEqC,GAAI,EACJC,QAAQ,UACR,aAAW,eACXC,MAAM,SAAC,IAAD,CAAYf,KAAM,GAAIS,MAAM,UAClCT,KAAK,KACLgB,YAAY,OACZC,QAAS,kBAAMvC,GAASwC,EAAAA,EAAAA,IAAcd,GAA7B,MAIhB,EAEDM,EAAQS,WAAa,CACnBf,GAAIgB,IAAAA,OAAAA,WACJnD,KAAMmD,IAAAA,OAAAA,WACN5C,OAAQ4C,IAAAA,OAAAA,YAGV,QCbA,EAhBoB,WAClB,IAAMC,GAAezC,EAAAA,EAAAA,IAAYd,GACjC,OACE,SAAC,KAAD,CAAMwD,QAAS,EAAf,SACGD,EAAaE,KAAI,SAAAhC,GAAO,OACvB,SAAC,EAAD,CAEEtB,KAAMsB,EAAQtB,KACdO,OAAQe,EAAQf,OAChB4B,GAAIb,EAAQa,IAHPb,EAAQa,GAFQ,KAU9B,E,mBCQD,EAtBe,WACb,IAAM/C,GAASuB,EAAAA,EAAAA,IAAYzB,GACrBuB,GAAWC,EAAAA,EAAAA,MAIjB,OACE,iCACE,SAAC,IAAD,CAASO,GAAG,KAAKc,KAAK,KAAtB,mCAGA,UAAC,IAAD,YACE,SAAC,IAAD,CACEH,cAAc,OACdC,UAAU,SAAC,IAAD,CAAaW,MAAM,gBAE/B,SAAC,EAAAR,EAAD,CAAOC,KAAK,OAAO5C,MAAOD,EAAQmD,SAbnB,SAAAgB,GACnB9C,GAAS+C,EAAAA,EAAAA,IAAaD,EAAEvC,OAAO3B,OAChC,SAeF,E,UCxBYoE,EAAS,kBACpB,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPpB,MAAM,UACNqB,UAAU,qBACVC,aAAc,CAAEC,QAAS,OAAQC,eAAgB,UACjDC,iBAAiB,SACjBC,SAAS,GATS,ECmCtB,EA1BiB,WACb,IAAMzD,GAAWC,EAAAA,EAAAA,MACXhB,GAAYiB,EAAAA,EAAAA,IAAYlB,GACxBG,GAAQe,EAAAA,EAAAA,IAAYhB,GAI1B,OAHCwE,EAAAA,EAAAA,YAAU,WACX1D,GAAS2D,EAAAA,EAAAA,MACV,GAAE,CAAC3D,KAEE,iCACI,SAAC4D,EAAA,EAAD,WACI,2CAEJ,UAAC,IAAD,CAAWC,KAAK,KAAhB,WACI,SAAC,IAAD,CAASrD,GAAG,KAAKc,KAAK,MAAMwC,UAAW,EAAG9C,GAAI,EAA9C,wBACA,SAAC,EAAD,KACA,SAAC,IAAD,CAAS+C,GAAI,KACb,SAAC,IAAD,CAASvD,GAAG,KAAKc,KAAK,MAAMwC,UAAW,EAAG9C,GAAI,EAA9C,uBACA,SAAC,EAAD,KACA,SAAC,IAAD,CAAS+C,GAAI,IACZ9E,IAAcE,IAAS,SAAC6D,EAAD,KACxB,SAAC,EAAD,SAIf,C","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.jsx","pages/Contacts.js"],"sourcesContent":["export const selectFilter = state => state.filter.value;","import { createSelector } from \"@reduxjs/toolkit\";\nimport {selectFilter} from '../filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContactsList = createSelector(\n    [selectContacts,selectFilter],(items, value) => {\n  if (value === '') return items;\n  return items.filter(item =>\n    item.name.toLocaleLowerCase().includes(value.toLocaleLowerCase())\n  );\n});","import { useState } from 'react';\nimport { customAlphabet } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  InputGroup,\n  InputLeftElement,\n  Box,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { HiUser } from 'react-icons/hi';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport toast from 'react-hot-toast';\n\nconst nanoid = customAlphabet('1234567890id-', 5);\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const nameInput = nanoid();\n  const phoneInput = nanoid();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (!contacts.some(contact => contact.name === name)) {\n      dispatch(addContact({ name, number }));\n    } else {\n      toast.error(`${name} is already in contacts`);\n    }\n    reset();\n  };\n\n  return (\n    <FormControl as=\"form\" isRequired onSubmit={handleSubmit}>\n      <Box mb={4}>\n        <FormLabel htmlFor={nameInput} fontsizes=\"large\">\n          Name\n        </FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<HiUser fill=\"lightgray\" size={26} />}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"Contact name\"\n            name=\"name\"\n            value={name}\n            id={nameInput}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n          />\n        </InputGroup>\n      </Box>\n      <Box mb={4}>\n        <FormLabel htmlFor={phoneInput} fontsizes=\"large\">\n          Number\n        </FormLabel>\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<PhoneIcon color=\"gray.300\" />}\n          />\n          <Input\n            type=\"tel\"\n            placeholder=\"Phone number\"\n            name=\"phone\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={phoneInput}\n            onChange={handleChange}\n          />\n        </InputGroup>\n      </Box>\n      <Button type=\"submit\" mb={2}>\n        Add contact\n      </Button>\n    </FormControl>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { IconButton, ListItem, ListIcon } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { BsEmojiSmile } from 'react-icons/bs';\nimport { deleteContact } from 'redux/contacts/operations';\nconst Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <ListItem fontSize=\"2xl\">\n      <ListIcon\n        pointerEvents=\"none\"\n        children={<BsEmojiSmile fill=\"green\" size={24} />}\n        mr={4}\n      />\n      {name}: {number}\n      <IconButton\n        ml={4}\n        variant=\"outline\"\n        aria-label=\"delete label\"\n        icon={<DeleteIcon size={32} color=\"brown\" />}\n        size=\"md\"\n        colorScheme=\"gray\"\n        onClick={() => dispatch(deleteContact(id))}\n      />\n    </ListItem>\n  );\n};\n\nContact.protoTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Contact from 'components/Contact/Contact';\nimport { List } from '@chakra-ui/react';\nimport { selectContactsList } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const contactsList = useSelector(selectContactsList);\n  return (\n    <List spacing={3}>\n      {contactsList.map(contact => (\n        <Contact\n          key={contact.id}\n          name={contact.name}\n          number={contact.number}\n          id={contact.id}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filter/slice';\nimport { Heading, Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\nimport { selectFilter } from 'redux/filter/selectors';\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    dispatch(changeFilter(e.target.value));\n  };\n  return (\n    <>\n      <Heading as=\"h3\" size=\"lg\">\n        Find contact by name\n      </Heading>\n      <InputGroup>\n        <InputLeftElement\n          pointerEvents=\"none\"\n          children={<Search2Icon color=\"gray.400\" />}\n        />\n        <Input type=\"text\" value={filter} onChange={handleChange} />\n      </InputGroup>\n    </>\n  );\n};\n\nexport default Filter;\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <ThreeDots\n    height=\"80\"\n    width=\"80\"\n    radius=\"9\"\n    color=\"#3d19c0\"\n    ariaLabel=\"three-dots-loading\"\n    wrapperStyle={{ display: 'flex', justifyContent: 'center' }}\n    wrapperClassName=\"Loader\"\n    visible={true}\n  />\n);\n","import { Helmet } from \"react-helmet\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Heading,Container,Divider } from '@chakra-ui/react';\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { selectIsLoading, selectError } from \"redux/contacts/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n     useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n    return (\n        <>\n            <Helmet>\n                <title>Contacts</title>\n            </Helmet>\n            <Container maxW=\"xl\">\n                <Heading as='h1' size='4xl' noOfLines={1} mb={4}>Phonebook</Heading>\n                <ContactForm />\n                <Divider my={4} />\n                <Heading as='h2' size='3xl' noOfLines={1} mb={4}>Contacts</Heading>\n                <Filter />\n                <Divider my={4} />\n                {isLoading && !error && <Loader />}\n                <ContactList />\n            </Container>\n        </>\n    )\n};\n\nexport default Contacts;"],"names":["selectFilter","state","filter","value","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsList","createSelector","item","name","toLocaleLowerCase","includes","nanoid","customAlphabet","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","nameInput","phoneInput","handleChange","evt","target","as","isRequired","onSubmit","preventDefault","some","contact","toast","addContact","mb","htmlFor","fontsizes","pointerEvents","children","fill","size","I","type","placeholder","id","pattern","title","required","onChange","color","Contact","fontSize","mr","ml","variant","icon","colorScheme","onClick","deleteContact","protoTypes","PropTypes","contactsList","spacing","map","e","changeFilter","Loader","height","width","radius","ariaLabel","wrapperStyle","display","justifyContent","wrapperClassName","visible","useEffect","fetchContacts","Helmet","maxW","noOfLines","my"],"sourceRoot":""}